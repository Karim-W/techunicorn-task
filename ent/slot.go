// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/karim-w/techunicorn-task/ent/slot"
	"github.com/karim-w/techunicorn-task/ent/user"
)

// Slot is the model entity for the Slot schema.
type Slot struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SlotId holds the value of the "slotId" field.
	SlotId uuid.UUID `json:"slotId,omitempty"`
	// PatientName holds the value of the "patientName" field.
	PatientName string `json:"patientName,omitempty"`
	// PatientId holds the value of the "patientId" field.
	PatientId string `json:"patientId,omitempty"`
	// AttendingName holds the value of the "attendingName" field.
	AttendingName string `json:"attendingName,omitempty"`
	// AttendingId holds the value of the "attendingId" field.
	AttendingId string `json:"attendingId,omitempty"`
	// StartTime holds the value of the "startTime" field.
	StartTime time.Time `json:"startTime,omitempty"`
	// EndTime holds the value of the "endTime" field.
	EndTime time.Time `json:"endTime,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SlotQuery when eager-loading is set.
	Edges          SlotEdges `json:"edges"`
	user_attending *int
	user_visiting  *int
}

// SlotEdges holds the relations/edges for other nodes in the graph.
type SlotEdges struct {
	// AttendingDoctor holds the value of the AttendingDoctor edge.
	AttendingDoctor *User `json:"AttendingDoctor,omitempty"`
	// Patient holds the value of the patient edge.
	Patient *User `json:"patient,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttendingDoctorOrErr returns the AttendingDoctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SlotEdges) AttendingDoctorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.AttendingDoctor == nil {
			// The edge AttendingDoctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.AttendingDoctor, nil
	}
	return nil, &NotLoadedError{edge: "AttendingDoctor"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SlotEdges) PatientOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// The edge patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Slot) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case slot.FieldID:
			values[i] = new(sql.NullInt64)
		case slot.FieldPatientName, slot.FieldPatientId, slot.FieldAttendingName, slot.FieldAttendingId, slot.FieldStatus:
			values[i] = new(sql.NullString)
		case slot.FieldStartTime, slot.FieldEndTime:
			values[i] = new(sql.NullTime)
		case slot.FieldSlotId:
			values[i] = new(uuid.UUID)
		case slot.ForeignKeys[0]: // user_attending
			values[i] = new(sql.NullInt64)
		case slot.ForeignKeys[1]: // user_visiting
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Slot", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Slot fields.
func (s *Slot) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case slot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case slot.FieldSlotId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field slotId", values[i])
			} else if value != nil {
				s.SlotId = *value
			}
		case slot.FieldPatientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patientName", values[i])
			} else if value.Valid {
				s.PatientName = value.String
			}
		case slot.FieldPatientId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patientId", values[i])
			} else if value.Valid {
				s.PatientId = value.String
			}
		case slot.FieldAttendingName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attendingName", values[i])
			} else if value.Valid {
				s.AttendingName = value.String
			}
		case slot.FieldAttendingId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attendingId", values[i])
			} else if value.Valid {
				s.AttendingId = value.String
			}
		case slot.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startTime", values[i])
			} else if value.Valid {
				s.StartTime = value.Time
			}
		case slot.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endTime", values[i])
			} else if value.Valid {
				s.EndTime = value.Time
			}
		case slot.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.String
			}
		case slot.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_attending", value)
			} else if value.Valid {
				s.user_attending = new(int)
				*s.user_attending = int(value.Int64)
			}
		case slot.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_visiting", value)
			} else if value.Valid {
				s.user_visiting = new(int)
				*s.user_visiting = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAttendingDoctor queries the "AttendingDoctor" edge of the Slot entity.
func (s *Slot) QueryAttendingDoctor() *UserQuery {
	return (&SlotClient{config: s.config}).QueryAttendingDoctor(s)
}

// QueryPatient queries the "patient" edge of the Slot entity.
func (s *Slot) QueryPatient() *UserQuery {
	return (&SlotClient{config: s.config}).QueryPatient(s)
}

// Update returns a builder for updating this Slot.
// Note that you need to call Slot.Unwrap() before calling this method if this Slot
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Slot) Update() *SlotUpdateOne {
	return (&SlotClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Slot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Slot) Unwrap() *Slot {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Slot is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Slot) String() string {
	var builder strings.Builder
	builder.WriteString("Slot(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", slotId=")
	builder.WriteString(fmt.Sprintf("%v", s.SlotId))
	builder.WriteString(", patientName=")
	builder.WriteString(s.PatientName)
	builder.WriteString(", patientId=")
	builder.WriteString(s.PatientId)
	builder.WriteString(", attendingName=")
	builder.WriteString(s.AttendingName)
	builder.WriteString(", attendingId=")
	builder.WriteString(s.AttendingId)
	builder.WriteString(", startTime=")
	builder.WriteString(s.StartTime.Format(time.ANSIC))
	builder.WriteString(", endTime=")
	builder.WriteString(s.EndTime.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(s.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Slots is a parsable slice of Slot.
type Slots []*Slot

func (s Slots) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
