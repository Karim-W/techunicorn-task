// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/karim-w/techunicorn-task/ent/predicate"
	"github.com/karim-w/techunicorn-task/ent/slot"
	"github.com/karim-w/techunicorn-task/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSlot = "Slot"
	TypeUser = "User"
)

// SlotMutation represents an operation that mutates the Slot nodes in the graph.
type SlotMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	slotId                  *uuid.UUID
	patientName             *string
	patientId               *string
	attendingName           *string
	attendingId             *string
	startTime               *time.Time
	endTime                 *time.Time
	status                  *string
	clearedFields           map[string]struct{}
	_AttendingDoctor        *int
	cleared_AttendingDoctor bool
	patient                 *int
	clearedpatient          bool
	done                    bool
	oldValue                func(context.Context) (*Slot, error)
	predicates              []predicate.Slot
}

var _ ent.Mutation = (*SlotMutation)(nil)

// slotOption allows management of the mutation configuration using functional options.
type slotOption func(*SlotMutation)

// newSlotMutation creates new mutation for the Slot entity.
func newSlotMutation(c config, op Op, opts ...slotOption) *SlotMutation {
	m := &SlotMutation{
		config:        c,
		op:            op,
		typ:           TypeSlot,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSlotID sets the ID field of the mutation.
func withSlotID(id int) slotOption {
	return func(m *SlotMutation) {
		var (
			err   error
			once  sync.Once
			value *Slot
		)
		m.oldValue = func(ctx context.Context) (*Slot, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Slot.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSlot sets the old Slot of the mutation.
func withSlot(node *Slot) slotOption {
	return func(m *SlotMutation) {
		m.oldValue = func(context.Context) (*Slot, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SlotMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SlotMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SlotMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SlotMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Slot.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSlotId sets the "slotId" field.
func (m *SlotMutation) SetSlotId(u uuid.UUID) {
	m.slotId = &u
}

// SlotId returns the value of the "slotId" field in the mutation.
func (m *SlotMutation) SlotId() (r uuid.UUID, exists bool) {
	v := m.slotId
	if v == nil {
		return
	}
	return *v, true
}

// OldSlotId returns the old "slotId" field's value of the Slot entity.
// If the Slot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlotMutation) OldSlotId(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlotId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlotId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlotId: %w", err)
	}
	return oldValue.SlotId, nil
}

// ResetSlotId resets all changes to the "slotId" field.
func (m *SlotMutation) ResetSlotId() {
	m.slotId = nil
}

// SetPatientName sets the "patientName" field.
func (m *SlotMutation) SetPatientName(s string) {
	m.patientName = &s
}

// PatientName returns the value of the "patientName" field in the mutation.
func (m *SlotMutation) PatientName() (r string, exists bool) {
	v := m.patientName
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old "patientName" field's value of the Slot entity.
// If the Slot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlotMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPatientName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName resets all changes to the "patientName" field.
func (m *SlotMutation) ResetPatientName() {
	m.patientName = nil
}

// SetPatientId sets the "patientId" field.
func (m *SlotMutation) SetPatientId(s string) {
	m.patientId = &s
}

// PatientId returns the value of the "patientId" field in the mutation.
func (m *SlotMutation) PatientId() (r string, exists bool) {
	v := m.patientId
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientId returns the old "patientId" field's value of the Slot entity.
// If the Slot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlotMutation) OldPatientId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPatientId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPatientId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientId: %w", err)
	}
	return oldValue.PatientId, nil
}

// ResetPatientId resets all changes to the "patientId" field.
func (m *SlotMutation) ResetPatientId() {
	m.patientId = nil
}

// SetAttendingName sets the "attendingName" field.
func (m *SlotMutation) SetAttendingName(s string) {
	m.attendingName = &s
}

// AttendingName returns the value of the "attendingName" field in the mutation.
func (m *SlotMutation) AttendingName() (r string, exists bool) {
	v := m.attendingName
	if v == nil {
		return
	}
	return *v, true
}

// OldAttendingName returns the old "attendingName" field's value of the Slot entity.
// If the Slot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlotMutation) OldAttendingName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttendingName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttendingName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttendingName: %w", err)
	}
	return oldValue.AttendingName, nil
}

// ResetAttendingName resets all changes to the "attendingName" field.
func (m *SlotMutation) ResetAttendingName() {
	m.attendingName = nil
}

// SetAttendingId sets the "attendingId" field.
func (m *SlotMutation) SetAttendingId(s string) {
	m.attendingId = &s
}

// AttendingId returns the value of the "attendingId" field in the mutation.
func (m *SlotMutation) AttendingId() (r string, exists bool) {
	v := m.attendingId
	if v == nil {
		return
	}
	return *v, true
}

// OldAttendingId returns the old "attendingId" field's value of the Slot entity.
// If the Slot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlotMutation) OldAttendingId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttendingId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttendingId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttendingId: %w", err)
	}
	return oldValue.AttendingId, nil
}

// ResetAttendingId resets all changes to the "attendingId" field.
func (m *SlotMutation) ResetAttendingId() {
	m.attendingId = nil
}

// SetStartTime sets the "startTime" field.
func (m *SlotMutation) SetStartTime(t time.Time) {
	m.startTime = &t
}

// StartTime returns the value of the "startTime" field in the mutation.
func (m *SlotMutation) StartTime() (r time.Time, exists bool) {
	v := m.startTime
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "startTime" field's value of the Slot entity.
// If the Slot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlotMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "startTime" field.
func (m *SlotMutation) ResetStartTime() {
	m.startTime = nil
}

// SetEndTime sets the "endTime" field.
func (m *SlotMutation) SetEndTime(t time.Time) {
	m.endTime = &t
}

// EndTime returns the value of the "endTime" field in the mutation.
func (m *SlotMutation) EndTime() (r time.Time, exists bool) {
	v := m.endTime
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "endTime" field's value of the Slot entity.
// If the Slot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlotMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "endTime" field.
func (m *SlotMutation) ResetEndTime() {
	m.endTime = nil
}

// SetStatus sets the "status" field.
func (m *SlotMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SlotMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Slot entity.
// If the Slot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlotMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SlotMutation) ResetStatus() {
	m.status = nil
}

// SetAttendingDoctorID sets the "AttendingDoctor" edge to the User entity by id.
func (m *SlotMutation) SetAttendingDoctorID(id int) {
	m._AttendingDoctor = &id
}

// ClearAttendingDoctor clears the "AttendingDoctor" edge to the User entity.
func (m *SlotMutation) ClearAttendingDoctor() {
	m.cleared_AttendingDoctor = true
}

// AttendingDoctorCleared reports if the "AttendingDoctor" edge to the User entity was cleared.
func (m *SlotMutation) AttendingDoctorCleared() bool {
	return m.cleared_AttendingDoctor
}

// AttendingDoctorID returns the "AttendingDoctor" edge ID in the mutation.
func (m *SlotMutation) AttendingDoctorID() (id int, exists bool) {
	if m._AttendingDoctor != nil {
		return *m._AttendingDoctor, true
	}
	return
}

// AttendingDoctorIDs returns the "AttendingDoctor" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AttendingDoctorID instead. It exists only for internal usage by the builders.
func (m *SlotMutation) AttendingDoctorIDs() (ids []int) {
	if id := m._AttendingDoctor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAttendingDoctor resets all changes to the "AttendingDoctor" edge.
func (m *SlotMutation) ResetAttendingDoctor() {
	m._AttendingDoctor = nil
	m.cleared_AttendingDoctor = false
}

// SetPatientID sets the "patient" edge to the User entity by id.
func (m *SlotMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the "patient" edge to the User entity.
func (m *SlotMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared reports if the "patient" edge to the User entity was cleared.
func (m *SlotMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the "patient" edge ID in the mutation.
func (m *SlotMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the "patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *SlotMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "patient" edge.
func (m *SlotMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// Where appends a list predicates to the SlotMutation builder.
func (m *SlotMutation) Where(ps ...predicate.Slot) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SlotMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Slot).
func (m *SlotMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SlotMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.slotId != nil {
		fields = append(fields, slot.FieldSlotId)
	}
	if m.patientName != nil {
		fields = append(fields, slot.FieldPatientName)
	}
	if m.patientId != nil {
		fields = append(fields, slot.FieldPatientId)
	}
	if m.attendingName != nil {
		fields = append(fields, slot.FieldAttendingName)
	}
	if m.attendingId != nil {
		fields = append(fields, slot.FieldAttendingId)
	}
	if m.startTime != nil {
		fields = append(fields, slot.FieldStartTime)
	}
	if m.endTime != nil {
		fields = append(fields, slot.FieldEndTime)
	}
	if m.status != nil {
		fields = append(fields, slot.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SlotMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case slot.FieldSlotId:
		return m.SlotId()
	case slot.FieldPatientName:
		return m.PatientName()
	case slot.FieldPatientId:
		return m.PatientId()
	case slot.FieldAttendingName:
		return m.AttendingName()
	case slot.FieldAttendingId:
		return m.AttendingId()
	case slot.FieldStartTime:
		return m.StartTime()
	case slot.FieldEndTime:
		return m.EndTime()
	case slot.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SlotMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case slot.FieldSlotId:
		return m.OldSlotId(ctx)
	case slot.FieldPatientName:
		return m.OldPatientName(ctx)
	case slot.FieldPatientId:
		return m.OldPatientId(ctx)
	case slot.FieldAttendingName:
		return m.OldAttendingName(ctx)
	case slot.FieldAttendingId:
		return m.OldAttendingId(ctx)
	case slot.FieldStartTime:
		return m.OldStartTime(ctx)
	case slot.FieldEndTime:
		return m.OldEndTime(ctx)
	case slot.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Slot field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SlotMutation) SetField(name string, value ent.Value) error {
	switch name {
	case slot.FieldSlotId:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlotId(v)
		return nil
	case slot.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	case slot.FieldPatientId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientId(v)
		return nil
	case slot.FieldAttendingName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttendingName(v)
		return nil
	case slot.FieldAttendingId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttendingId(v)
		return nil
	case slot.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case slot.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case slot.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Slot field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SlotMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SlotMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SlotMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Slot numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SlotMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SlotMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SlotMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Slot nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SlotMutation) ResetField(name string) error {
	switch name {
	case slot.FieldSlotId:
		m.ResetSlotId()
		return nil
	case slot.FieldPatientName:
		m.ResetPatientName()
		return nil
	case slot.FieldPatientId:
		m.ResetPatientId()
		return nil
	case slot.FieldAttendingName:
		m.ResetAttendingName()
		return nil
	case slot.FieldAttendingId:
		m.ResetAttendingId()
		return nil
	case slot.FieldStartTime:
		m.ResetStartTime()
		return nil
	case slot.FieldEndTime:
		m.ResetEndTime()
		return nil
	case slot.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Slot field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SlotMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._AttendingDoctor != nil {
		edges = append(edges, slot.EdgeAttendingDoctor)
	}
	if m.patient != nil {
		edges = append(edges, slot.EdgePatient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SlotMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case slot.EdgeAttendingDoctor:
		if id := m._AttendingDoctor; id != nil {
			return []ent.Value{*id}
		}
	case slot.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SlotMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SlotMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SlotMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_AttendingDoctor {
		edges = append(edges, slot.EdgeAttendingDoctor)
	}
	if m.clearedpatient {
		edges = append(edges, slot.EdgePatient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SlotMutation) EdgeCleared(name string) bool {
	switch name {
	case slot.EdgeAttendingDoctor:
		return m.cleared_AttendingDoctor
	case slot.EdgePatient:
		return m.clearedpatient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SlotMutation) ClearEdge(name string) error {
	switch name {
	case slot.EdgeAttendingDoctor:
		m.ClearAttendingDoctor()
		return nil
	case slot.EdgePatient:
		m.ClearPatient()
		return nil
	}
	return fmt.Errorf("unknown Slot unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SlotMutation) ResetEdge(name string) error {
	switch name {
	case slot.EdgeAttendingDoctor:
		m.ResetAttendingDoctor()
		return nil
	case slot.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Slot edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *int
	userId            *uuid.UUID
	_FirstName        *string
	_LastName         *string
	_Email            *string
	_Password         *string
	_Phone            *string
	_Type             *string
	clearedFields     map[string]struct{}
	_Attending        map[int]struct{}
	removed_Attending map[int]struct{}
	cleared_Attending bool
	_Visiting         map[int]struct{}
	removed_Visiting  map[int]struct{}
	cleared_Visiting  bool
	done              bool
	oldValue          func(context.Context) (*User, error)
	predicates        []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserId sets the "userId" field.
func (m *UserMutation) SetUserId(u uuid.UUID) {
	m.userId = &u
}

// UserId returns the value of the "userId" field in the mutation.
func (m *UserMutation) UserId() (r uuid.UUID, exists bool) {
	v := m.userId
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old "userId" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserId(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// ResetUserId resets all changes to the "userId" field.
func (m *UserMutation) ResetUserId() {
	m.userId = nil
}

// SetFirstName sets the "FirstName" field.
func (m *UserMutation) SetFirstName(s string) {
	m._FirstName = &s
}

// FirstName returns the value of the "FirstName" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m._FirstName
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "FirstName" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "FirstName" field.
func (m *UserMutation) ResetFirstName() {
	m._FirstName = nil
}

// SetLastName sets the "LastName" field.
func (m *UserMutation) SetLastName(s string) {
	m._LastName = &s
}

// LastName returns the value of the "LastName" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m._LastName
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "LastName" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "LastName" field.
func (m *UserMutation) ResetLastName() {
	m._LastName = nil
}

// SetEmail sets the "Email" field.
func (m *UserMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the value of the "Email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "Email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "Email" field.
func (m *UserMutation) ResetEmail() {
	m._Email = nil
}

// SetPassword sets the "Password" field.
func (m *UserMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the value of the "Password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "Password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "Password" field.
func (m *UserMutation) ResetPassword() {
	m._Password = nil
}

// SetPhone sets the "Phone" field.
func (m *UserMutation) SetPhone(s string) {
	m._Phone = &s
}

// Phone returns the value of the "Phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m._Phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "Phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "Phone" field.
func (m *UserMutation) ResetPhone() {
	m._Phone = nil
}

// SetType sets the "Type" field.
func (m *UserMutation) SetType(s string) {
	m._Type = &s
}

// GetType returns the value of the "Type" field in the mutation.
func (m *UserMutation) GetType() (r string, exists bool) {
	v := m._Type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "Type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "Type" field.
func (m *UserMutation) ResetType() {
	m._Type = nil
}

// AddAttendingIDs adds the "Attending" edge to the Slot entity by ids.
func (m *UserMutation) AddAttendingIDs(ids ...int) {
	if m._Attending == nil {
		m._Attending = make(map[int]struct{})
	}
	for i := range ids {
		m._Attending[ids[i]] = struct{}{}
	}
}

// ClearAttending clears the "Attending" edge to the Slot entity.
func (m *UserMutation) ClearAttending() {
	m.cleared_Attending = true
}

// AttendingCleared reports if the "Attending" edge to the Slot entity was cleared.
func (m *UserMutation) AttendingCleared() bool {
	return m.cleared_Attending
}

// RemoveAttendingIDs removes the "Attending" edge to the Slot entity by IDs.
func (m *UserMutation) RemoveAttendingIDs(ids ...int) {
	if m.removed_Attending == nil {
		m.removed_Attending = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._Attending, ids[i])
		m.removed_Attending[ids[i]] = struct{}{}
	}
}

// RemovedAttending returns the removed IDs of the "Attending" edge to the Slot entity.
func (m *UserMutation) RemovedAttendingIDs() (ids []int) {
	for id := range m.removed_Attending {
		ids = append(ids, id)
	}
	return
}

// AttendingIDs returns the "Attending" edge IDs in the mutation.
func (m *UserMutation) AttendingIDs() (ids []int) {
	for id := range m._Attending {
		ids = append(ids, id)
	}
	return
}

// ResetAttending resets all changes to the "Attending" edge.
func (m *UserMutation) ResetAttending() {
	m._Attending = nil
	m.cleared_Attending = false
	m.removed_Attending = nil
}

// AddVisitingIDs adds the "Visiting" edge to the Slot entity by ids.
func (m *UserMutation) AddVisitingIDs(ids ...int) {
	if m._Visiting == nil {
		m._Visiting = make(map[int]struct{})
	}
	for i := range ids {
		m._Visiting[ids[i]] = struct{}{}
	}
}

// ClearVisiting clears the "Visiting" edge to the Slot entity.
func (m *UserMutation) ClearVisiting() {
	m.cleared_Visiting = true
}

// VisitingCleared reports if the "Visiting" edge to the Slot entity was cleared.
func (m *UserMutation) VisitingCleared() bool {
	return m.cleared_Visiting
}

// RemoveVisitingIDs removes the "Visiting" edge to the Slot entity by IDs.
func (m *UserMutation) RemoveVisitingIDs(ids ...int) {
	if m.removed_Visiting == nil {
		m.removed_Visiting = make(map[int]struct{})
	}
	for i := range ids {
		delete(m._Visiting, ids[i])
		m.removed_Visiting[ids[i]] = struct{}{}
	}
}

// RemovedVisiting returns the removed IDs of the "Visiting" edge to the Slot entity.
func (m *UserMutation) RemovedVisitingIDs() (ids []int) {
	for id := range m.removed_Visiting {
		ids = append(ids, id)
	}
	return
}

// VisitingIDs returns the "Visiting" edge IDs in the mutation.
func (m *UserMutation) VisitingIDs() (ids []int) {
	for id := range m._Visiting {
		ids = append(ids, id)
	}
	return
}

// ResetVisiting resets all changes to the "Visiting" edge.
func (m *UserMutation) ResetVisiting() {
	m._Visiting = nil
	m.cleared_Visiting = false
	m.removed_Visiting = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.userId != nil {
		fields = append(fields, user.FieldUserId)
	}
	if m._FirstName != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m._LastName != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m._Email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m._Password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m._Phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m._Type != nil {
		fields = append(fields, user.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserId:
		return m.UserId()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserId:
		return m.OldUserId(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserId:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserId:
		m.ResetUserId()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._Attending != nil {
		edges = append(edges, user.EdgeAttending)
	}
	if m._Visiting != nil {
		edges = append(edges, user.EdgeVisiting)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAttending:
		ids := make([]ent.Value, 0, len(m._Attending))
		for id := range m._Attending {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVisiting:
		ids := make([]ent.Value, 0, len(m._Visiting))
		for id := range m._Visiting {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removed_Attending != nil {
		edges = append(edges, user.EdgeAttending)
	}
	if m.removed_Visiting != nil {
		edges = append(edges, user.EdgeVisiting)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAttending:
		ids := make([]ent.Value, 0, len(m.removed_Attending))
		for id := range m.removed_Attending {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVisiting:
		ids := make([]ent.Value, 0, len(m.removed_Visiting))
		for id := range m.removed_Visiting {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_Attending {
		edges = append(edges, user.EdgeAttending)
	}
	if m.cleared_Visiting {
		edges = append(edges, user.EdgeVisiting)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeAttending:
		return m.cleared_Attending
	case user.EdgeVisiting:
		return m.cleared_Visiting
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeAttending:
		m.ResetAttending()
		return nil
	case user.EdgeVisiting:
		m.ResetVisiting()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
