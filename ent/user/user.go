// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldFirstName holds the string denoting the firstname field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the lastname field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeAttending holds the string denoting the attending edge name in mutations.
	EdgeAttending = "Attending"
	// EdgeVisiting holds the string denoting the visiting edge name in mutations.
	EdgeVisiting = "Visiting"
	// Table holds the table name of the user in the database.
	Table = "users"
	// AttendingTable is the table that holds the Attending relation/edge.
	AttendingTable = "slots"
	// AttendingInverseTable is the table name for the Slot entity.
	// It exists in this package in order to avoid circular dependency with the "slot" package.
	AttendingInverseTable = "slots"
	// AttendingColumn is the table column denoting the Attending relation/edge.
	AttendingColumn = "user_attending"
	// VisitingTable is the table that holds the Visiting relation/edge.
	VisitingTable = "slots"
	// VisitingInverseTable is the table name for the Slot entity.
	// It exists in this package in order to avoid circular dependency with the "slot" package.
	VisitingInverseTable = "slots"
	// VisitingColumn is the table column denoting the Visiting relation/edge.
	VisitingColumn = "user_visiting"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUserId,
	FieldFirstName,
	FieldLastName,
	FieldEmail,
	FieldPassword,
	FieldPhone,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFirstName holds the default value on creation for the "FirstName" field.
	DefaultFirstName string
	// DefaultLastName holds the default value on creation for the "LastName" field.
	DefaultLastName string
	// PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultPhone holds the default value on creation for the "Phone" field.
	DefaultPhone string
	// TypeValidator is a validator for the "Type" field. It is called by the builders before save.
	TypeValidator func(string) error
)
