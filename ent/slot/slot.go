// Code generated by entc, DO NOT EDIT.

package slot

const (
	// Label holds the string label denoting the slot type in the database.
	Label = "slot"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlotId holds the string denoting the slotid field in the database.
	FieldSlotId = "slot_id"
	// FieldPatientName holds the string denoting the patientname field in the database.
	FieldPatientName = "patient_name"
	// FieldPatientId holds the string denoting the patientid field in the database.
	FieldPatientId = "patient_id"
	// FieldAttendingName holds the string denoting the attendingname field in the database.
	FieldAttendingName = "attending_name"
	// FieldAttendingId holds the string denoting the attendingid field in the database.
	FieldAttendingId = "attending_id"
	// FieldStartTime holds the string denoting the starttime field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the endtime field in the database.
	FieldEndTime = "end_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeAttendingDoctor holds the string denoting the attendingdoctor edge name in mutations.
	EdgeAttendingDoctor = "AttendingDoctor"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "patient"
	// Table holds the table name of the slot in the database.
	Table = "slots"
	// AttendingDoctorTable is the table that holds the AttendingDoctor relation/edge.
	AttendingDoctorTable = "slots"
	// AttendingDoctorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AttendingDoctorInverseTable = "users"
	// AttendingDoctorColumn is the table column denoting the AttendingDoctor relation/edge.
	AttendingDoctorColumn = "user_attending"
	// PatientTable is the table that holds the patient relation/edge.
	PatientTable = "slots"
	// PatientInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PatientInverseTable = "users"
	// PatientColumn is the table column denoting the patient relation/edge.
	PatientColumn = "user_visiting"
)

// Columns holds all SQL columns for slot fields.
var Columns = []string{
	FieldID,
	FieldSlotId,
	FieldPatientName,
	FieldPatientId,
	FieldAttendingName,
	FieldAttendingId,
	FieldStartTime,
	FieldEndTime,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "slots"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_attending",
	"user_visiting",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PatientNameValidator is a validator for the "patientName" field. It is called by the builders before save.
	PatientNameValidator func(string) error
	// PatientIdValidator is a validator for the "patientId" field. It is called by the builders before save.
	PatientIdValidator func(string) error
	// AttendingNameValidator is a validator for the "attendingName" field. It is called by the builders before save.
	AttendingNameValidator func(string) error
	// AttendingIdValidator is a validator for the "attendingId" field. It is called by the builders before save.
	AttendingIdValidator func(string) error
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
)
